[{"C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\App.jsx":"1","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\Graphs.jsx":"2","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\GraphsComponents.jsx":"3","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\PagesComponents.jsx":"4","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\index.jsx":"5"},{"size":1275,"mtime":1611197206260,"results":"6","hashOfConfig":"7"},{"size":7047,"mtime":1611197198795,"results":"8","hashOfConfig":"7"},{"size":3207,"mtime":1611195755716,"results":"9","hashOfConfig":"7"},{"size":5613,"mtime":1611195758365,"results":"10","hashOfConfig":"7"},{"size":408,"mtime":1611197193245,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"13wb9j6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\App.jsx",["24","25"],"import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport {Body, Footer} from \"./components/PagesComponents\"\r\n\r\nfunction App() {\r\n\r\n  return ( \r\n    <div className=\"App\">\r\n\r\n      <div style={{display: 'flex'}} id=\"wrapper\">\r\n      \r\n        <Body></Body>\r\n\r\n        <Footer></Footer>\r\n\r\n      </div>\r\n\r\n      <div id=\"bg\"></div>\r\n\r\n      <script src=\"assets/js/jquery.min.js\"></script>\r\n      <script src=\"assets/js/browser.min.js\"></script>\r\n      <script src=\"assets/js/breakpoints.min.js\"></script>\r\n      <script src=\"assets/js/util.js\"></script>\r\n      <script src=\"assets/js/main.js\"></script>\r\n      <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin=\"anonymous\"></script>\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\Graphs.jsx",["26","27","28","29"],"import React from 'react';\r\nimport {Bar, Line} from 'react-chartjs-2';\r\nimport myData from \"../data/producao.json\";\r\nexport {GraphSum, GraphMean, GraphComp};\r\n\r\n// GRAPH LABELS\r\n\r\nconst labels = ['17', '18', '19','20', '21', '22'];\r\n\r\n// FUNÇÕES PARA CÁLCULO \r\n\r\nfunction somar() {\r\n    let sum = [1, 1, 1, 1, 1, 1];\r\n    for (let i = 0; i < myData.length; i++) {\r\n        for (let j = 0; j < labels.length; j++) {\r\n            if (JSON.stringify(myData[i].pt).includes(\"2016-04-\" + labels[j])) {\r\n                sum[j]++;\r\n            }\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n\r\nfunction media() {\r\n  let somaDias = somar()\r\n  let mean = [0, 0, 0, 0, 0, 0];\r\n  let s = 0;\r\n\r\n  for (let i = 0; i < labels.length; i++) {\r\n      let sum = 0;\r\n      for (let j = 1; j < somaDias[i]; j++) {\r\n          sum += myData[s++].sis;\r\n      }\r\n      mean[i] = sum / somaDias[i];\r\n  }\r\n  return mean;\r\n}\r\n\r\n// GRÁFICO SOMA PRODUÇÕES DIÁRIAS\r\n\r\nconst graphSoma = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: 'Produção',\r\n      fill: true,\r\n      lineTension: 0.5,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75, 192, 192, 0.6)',\r\n      scaleFontColor: \"#ff0000\",\r\n      borderWidth: 2,\r\n      data: somar()\r\n    }\r\n  ],\r\n    options: {\r\n        layout: {\r\n            padding: {\r\n                left: 0,\r\n                right: 0,\r\n                top: 25,\r\n                bottom: 25\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nclass GraphSum extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n      <article id=\"Line\">\r\n        <Line\r\n          data={graphSoma}\r\n          height={\"400%\"}\r\n          width={\"70%\"}\r\n          options = {{\r\n            maintainAspectRatio : false,\r\n            title:{\r\n              display: true,\r\n              text:'PRODUÇÃO DIÁRIA',\r\n              fontSize:60,\r\n              fontColor:'rgba(245, 240, 228, 0.7)',\r\n              fontWeight: 600,\r\n              fontFamily: \"inherit\", \r\n              textTransform: 'uppercase'\r\n            },\r\n            scales: {\r\n              yAxes: [{\r\n                ticks: {\r\n                  fontColor: 'rgba(245, 240, 228, 0.7)'\r\n                }\r\n                \r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: 'rgba(245, 240, 228, 0.7)'\r\n                }\r\n                \r\n              }]\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'top',\r\n              labels: {\r\n                fontColor: 'rgba(245, 240, 228, 0.7)',\r\n                fontSize: 25,    \r\n                fontFamily: \"inherit\"\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\n// GRÁFICO MÉDIA TEMPO IMPRODUTIVO / DIA\r\n\r\nconst graphMedia = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      label: 'Tempo inativo',\r\n      fill: true,\r\n      lineTension: 0.5,\r\n      backgroundColor: 'rgba(150, 74, 237, 0.4)',\r\n      borderColor: 'rgba(150, 74, 237, 0.6)',\r\n      scaleFontColor: \"#ff0000\",\r\n      borderWidth: 2,\r\n      data: media()\r\n    }\r\n  ],\r\n    options: {\r\n        layout: {\r\n            padding: {\r\n                left: 0,\r\n                right: 0,\r\n                top: 25,\r\n                bottom: 25\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nclass GraphMean extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <article id=\"Line\">\r\n        <Line\r\n          data={graphMedia}\r\n          height={\"400%\"}\r\n          width={\"70%\"}\r\n          options = {{\r\n            maintainAspectRatio : false,\r\n            title:{\r\n              display: true,\r\n              text:'TEMPO MÉDIO DE INATIVIDADE',\r\n              fontSize:60,\r\n              fontColor:'rgba(245, 240, 228, 0.7)',\r\n              fontWeight: 600,\r\n              fontFamily: \"inherit\", \r\n              textTransform: 'uppercase'\r\n            },\r\n            scales: {\r\n              yAxes: [{\r\n                ticks: {\r\n                  fontColor: 'rgba(245, 240, 228, 0.7)'\r\n                }\r\n                \r\n              }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: 'rgba(245, 240, 228, 0.7)'\r\n                }\r\n                \r\n              }]\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'top',\r\n              labels: {\r\n                fontColor: 'rgba(245, 240, 228, 0.7)',\r\n                fontSize: 25,    \r\n                fontFamily: \"inherit\"\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\n// GRÁFICO COMPARAÇÃO SOMA x MÉDIA\r\n\r\nconst graphComp = {\r\n  labels: labels,\r\n  datasets: [\r\n    {\r\n      yAxisID: 'B',\r\n      label: 'Tempo inativo',\r\n      fill: true,\r\n      lineTension: 0.5,\r\n      backgroundColor: 'rgba(150, 74, 237, 0.1)',\r\n      borderColor: 'rgba(150, 74, 237, 0.6)',\r\n      scaleFontColor: \"#ff0000\",\r\n      borderWidth: 2,\r\n      data: media()\r\n    },\r\n    {\r\n      yAxisID: 'A',\r\n      label: 'Produção',\r\n      fill: true,\r\n      lineTension: 0.5,\r\n      backgroundColor: 'rgba(75,192,192,0.1)',\r\n      borderColor: 'rgba(75, 192, 192, 0.6)',\r\n      scaleFontColor: \"#ff0000\",\r\n      borderWidth: 2,\r\n      data: somar() \r\n    }\r\n  ],\r\n    options: {\r\n        layout: {\r\n            padding: {\r\n                left: 0,\r\n                right: 0,\r\n                top: 25,\r\n                bottom: 25\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nclass GraphComp extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <article id=\"Line\">\r\n        <Line\r\n          data={graphComp}\r\n          height={\"400%\"}\r\n          width={\"70%\"}\r\n          options = {{\r\n            maintainAspectRatio : false,\r\n            title:{\r\n              display: true,\r\n              text:'COMPARAÇÃO',\r\n              fontSize:40,\r\n              fontColor:'rgba(245, 240, 228, 0.7)',\r\n              fontWeight: 600,\r\n              fontFamily: \"inherit\", \r\n              textTransform: 'uppercase'\r\n            },\r\n            scales: {\r\n              yAxes: [{\r\n                id: 'A',\r\n                type: 'linear',\r\n                position: 'right',\r\n                ticks: {\r\n                  fontColor: 'rgba(75, 192, 192, 1.5)'\r\n                }},\r\n                {\r\n                  id: 'B',\r\n                  type: 'linear',\r\n                  position: 'left', \r\n                  ticks: {\r\n                    fontColor: 'rgba(150, 74, 237, 1)',\r\n                    max: 8,\r\n                    min: 0\r\n                  },\r\n                }],\r\n              xAxes: [{\r\n                ticks: {\r\n                  fontColor: 'rgba(245, 240, 228, 0.7)'\r\n                }\r\n              }]\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'top',\r\n              labels: {\r\n                fontColor: 'rgba(245, 240, 228, 0.7)',\r\n                fontSize: 25,    \r\n                fontFamily: \"inherit\"\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </article>\r\n    );\r\n  }\r\n}","C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\GraphsComponents.jsx",[],"C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\components\\PagesComponents.jsx",["30","31","32","33","34","35","36","37"],"C:\\Users\\annap\\OneDrive\\Documentos\\ANNA\\IndwiseDesafio\\desafioIndwise\\my-app\\src\\index.jsx",[],{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"42","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":12},{"ruleId":"38","severity":1,"message":"43","line":2,"column":9,"nodeType":"40","messageId":"41","endLine":2,"endColumn":12},{"ruleId":"44","severity":1,"message":"45","line":4,"column":9,"nodeType":"40","messageId":"46","endLine":4,"endColumn":17},{"ruleId":"44","severity":1,"message":"47","line":4,"column":19,"nodeType":"40","messageId":"46","endLine":4,"endColumn":28},{"ruleId":"44","severity":1,"message":"48","line":4,"column":30,"nodeType":"40","messageId":"46","endLine":4,"endColumn":39},{"ruleId":"49","severity":1,"message":"50","line":67,"column":36,"nodeType":"51","endLine":67,"endColumn":39},{"ruleId":"52","severity":1,"message":"53","line":67,"column":36,"nodeType":"51","endLine":67,"endColumn":39},{"ruleId":"49","severity":1,"message":"50","line":68,"column":88,"nodeType":"51","endLine":68,"endColumn":91},{"ruleId":"52","severity":1,"message":"53","line":68,"column":88,"nodeType":"51","endLine":68,"endColumn":91},{"ruleId":"52","severity":1,"message":"53","line":131,"column":17,"nodeType":"51","endLine":134,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":135,"column":17,"nodeType":"51","endLine":138,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":139,"column":17,"nodeType":"51","endLine":142,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":143,"column":17,"nodeType":"51","endLine":146,"endColumn":15},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Bar' is defined but never used.","no-use-before-define","'GraphSum' was used before it was defined.","usedBeforeDefined","'GraphMean' was used before it was defined.","'GraphComp' was used before it was defined.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]